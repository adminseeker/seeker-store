pipeline {
    agent { label 'docker-host'}
      environment {
        GITHUB_CREDENTIALS = credentials('github-secret-as-username-password')
    }
    stages {
        stage('Code Checkout') {
            steps{
                checkout scm
            }
        }
        stage('Docker Login') {
            steps {
                sh 'echo $GITHUB_CREDENTIALS_PSW | docker login ghcr.io -u $GITHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('Build Docker Images') {
            stages {
                stage("user-service build"){
                    when { changeset "user-service/**" }
                    steps {
                        sh "cd user-service && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/user-service:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes userservice manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/user-service.*+ghcr.io/adminseeker/user-service:${BUILD_NUMBER}+g' kubernetes/dev/services/userservice.yml"
                        
                    }
                }
                stage("auth-service build"){
                    when { changeset "auth-service/**" }
                    steps {
                        sh "cd auth-service && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/auth-service:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes authservice manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/auth-service.*+ghcr.io/adminseeker/auth-service:${BUILD_NUMBER}+g' kubernetes/dev/services/authservice.yml"
                    }
                }
                stage("product-service build"){
                    when { changeset "product-service/**" }
                    steps {
                        sh "cd product-service && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/product-service:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes productservice manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/product-service.*+ghcr.io/adminseeker/product-service:${BUILD_NUMBER}+g' kubernetes/dev/services/productservice.yml"
                    }
                }
                stage("inventory-service build"){
                    when { changeset "inventory-service/**" }
                    steps {
                        sh "cd inventory-service && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/inventory-service:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes inventoryservice manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/inventory-service.*+ghcr.io/adminseeker/inventory-service:${BUILD_NUMBER}+g' kubernetes/dev/services/inventoryservice.yml"
                    }
                }
                stage("cart-service build"){
                    when { changeset "cart-service/**" }
                    steps {
                        sh "cd cart-service && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/cart-service:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes cartservice manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/cart-service.*+ghcr.io/adminseeker/cart-service:${BUILD_NUMBER}+g' kubernetes/dev/services/cartservice.yml"
                    }
                }
                stage("order-service build"){
                    when { changeset "order-service/**" }
                    steps {
                        sh "cd order-service && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/order-service:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes orderservice manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/order-service.*+ghcr.io/adminseeker/order-service:${BUILD_NUMBER}+g' kubernetes/dev/services/orderservice.yml"
                    }
                }
                stage("gateway-server build"){
                    when { changeset "gateway-server/**" }
                    steps {
                        sh "cd gateway-server && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/gateway-server:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes gatewayserver manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/gateway-server.*+ghcr.io/adminseeker/gateway-server:${BUILD_NUMBER}+g' kubernetes/dev/services/gatewayserver.yml"
                    }
                }
                stage("config-service build"){
                    when { changeset "config-service/**" }
                    steps {
                        sh "cd config-service && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/config-service:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes configservice manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/config-service.*+ghcr.io/adminseeker/config-service:${BUILD_NUMBER}+g' kubernetes/dev/services/configservice.yml"
                    }
                }
                stage("eureka-server build"){
                    when { changeset "eureka-server/**" }
                    steps {
                        sh "cd eureka-server && mvn clean spring-boot:build-image -DskipTests -DimageVersion=${BUILD_NUMBER}"
                        sh 'echo pushing package to github container registry...'
                        sh "docker push ghcr.io/adminseeker/eureka-server:${BUILD_NUMBER}"
                        sh 'cd ..'
                        sh 'echo updating kubernetes eurekaserver manifest file...'
                        sh "sed -i 's+ghcr.io/adminseeker/eureka-server.*+ghcr.io/adminseeker/eureka-server:${BUILD_NUMBER}+g' kubernetes/dev/services/eurekaserver.yml"
                    }
                }
                stage('Push Kubernetes Manifest Files'){
                    when { changeset "user-service/**" }
                    steps {
                        script{
                            withCredentials([usernamePassword(credentialsId: 'github-secret-as-username-password', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                                sh '''
                                    git config user.email "aravind.arali@gmail.com"
                                    git config user.name "adminseeker"
                                    BUILD_NUMBER=${BUILD_NUMBER}
                                    GIT_USER_NAME=adminseeker
                                    GIT_REPO_NAME=seeker-store
                                    git add .
                                    git commit -m "Updated image to version ${BUILD_NUMBER}"
                                    git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/$GIT_USER_NAME/$GIT_REPO_NAME HEAD:dev
                                '''
                            }
                        }
                    }
                }   
            }
        }
    }
}